name: Tests

on:
  workflow_dispatch:
  push:
    branches:
      - "main"
      - "master"
      #- "dev"
      #- "develop"
      #- "feature/**"
      #- "bugfix/**"
      #- "hotfix/**"
      #- "support/**"
    paths:
      - "lib/**.dart"
      - "test/**.dart"
      - "example/**.dart"
      - ".github/workflows/*.yml"
      - "pubspec.yaml"
      - "analysis_options.yaml"
  pull_request:
    branches:
      - "main"
      - "master"
      - "dev"
      - "develop"
      - "feature/**"
      - "bugfix/**"
      - "hotfix/**"
      - "support/**"
    paths:
      - "lib/**.dart"
      - "test/**.dart"
      - "example/**.dart"
      - ".github/workflows/*.yml"
      - "pubspec.yaml"
      - "analysis_options.yaml"

permissions:
  contents: read
  actions: read
  checks: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  #  build-echo:
  #    name: "Build Echo server"
  #    runs-on: ubuntu-latest
  #    defaults:
  #      run:
  #        working-directory: ./
  #    container:
  #      image: golang:1.22
  #    env:
  #      echo-cache-name: echo
  #    timeout-minutes: 5
  #    steps:
  #      - name: üöÇ Get latest code
  #        id: checkout
  #        uses: actions/checkout@v4
  #        with:
  #          sparse-checkout: |
  #            .github
  #            tool/echo
  #
  #      - name: üì§ Restore Go echo server
  #        id: cache-echo-restore
  #        uses: actions/cache/restore@v4
  #        with:
  #          path: |
  #            ~/build/bin/echo
  #          key: ${{ runner.os }}-spinify-${{ env.echo-cache-name }}-${{ hashFiles('tool/echo/echo.go') }}
  #
  #      - name: ü¶´ Build Go echo server
  #        id: build-echo
  #        if: steps.cache-echo-restore.outputs.cache-hit != 'true'
  #        working-directory: ./tool/echo
  #        run: |
  #          mkdir -p ~/build/bin/
  #          go get
  #          go build -o ~/build/bin/echo echo.go
  #
  #      - name: üì• Save Go echo server
  #        id: cache-echo-save
  #        if: steps.cache-echo-restore.outputs.cache-hit != 'true'
  #        uses: actions/cache/save@v4
  #        with:
  #          path: |
  #            ~/build/bin/echo
  #          key: ${{ runner.os }}-spinify-${{ env.echo-cache-name }}-${{ hashFiles('tool/echo/echo.go') }}
  #
  #      - name: üíæ Upload Go echo server
  #        id: upload-echo-server
  #        uses: actions/upload-artifact@v4
  #        with:
  #          name: echo-server
  #          path: ~/build/bin/echo
  #          compression-level: 6
  #          overwrite: true
  #          retention-days: 1

  tests:
    name: "Tests"
    runs-on: ubuntu-latest
    #needs: build-echo
    defaults:
      run:
        working-directory: ./
    container:
      image: dart:stable
    env:
      threshold: 50
      pub-cache: pub
      PUB_CACHE: /github/home/.pub-cache
    timeout-minutes: 15
    steps:
      - name: üöÇ Get latest code
        id: checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github
            pubspec.yaml
            lib
            test
            analysis_options.yaml
            README.md
            CHANGELOG.md

      #- name: üìÇ Download Echo server
      #  id: download-echo-server
      #  uses: actions/download-artifact@v4
      #  with:
      #    name: echo-server
      #    path: ~/build/bin/

      - name: üì§ Restore Pub modules
        id: cache-pub-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            /home/runner/.pub-cache
          key: ${{ runner.os }}-pub-${{ env.pub-cache }}-${{ hashFiles('pubspec.yaml') }}

      - name: üë∑ Install Dependencies
        id: install-dependencies
        timeout-minutes: 1
        run: |
          echo $PUB_CACHE/bin >> $GITHUB_PATH
          apt-get update && apt-get install -y lcov bc
          dart pub get --no-example

      - name: üì• Save Pub modules
        id: cache-pub-save
        if: steps.cache-pub-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            /home/runner/.pub-cache
          key: ${{ steps.cache-pub-restore.outputs.cache-primary-key }}

      #- name: üì¢ Run Echo server
      #  id: run-echo-server
      #  timeout-minutes: 1
      #  run: |
      #    test -f ~/build/bin/echo
      #    chmod +x ~/build/bin/echo
      #    nohup ~/build/bin/echo > echo.log 2>&1 &
      #    echo $! > echo_pid.txt
      #  env:
      #    PORT: 8000

      - name: üß™ Run tests
        id: run-tests
        timeout-minutes: 10
        run: |
          dart pub global activate coverage
          dart pub global run coverage:test_with_coverage -fb -o coverage -- \
            --platform vm --compiler=kernel --coverage=coverage \
            --reporter=github --file-reporter=json:reports/tests.json \
            --timeout=10m --concurrency=12 --color \
              test/unit_test.dart

      #- name: üßæ Upload echo logs
      #  id: upload-echo-logs
      #  if: always()
      #  uses: actions/upload-artifact@v4
      #  with:
      #    name: server-logs
      #    path: echo.log
      #    compression-level: 9
      #    overwrite: true
      #    retention-days: 1

      #- name: ‚úã Stop echo server
      #  id: stop-echo-server
      #  timeout-minutes: 1
      #  if: always()
      #  run: |
      #    kill $(cat echo_pid.txt) || true
      #    rm -f echo_pid.txt || true
      #    rm -f echo.log || true

      - name: üîç Check coverage
        id: check-coverage
        timeout-minutes: 2
        run: |
          mv coverage/lcov.info coverage/lcov.base.info
          lcov --remove coverage/lcov.base.info '*/protobuf/client.*.dart' '*/model/*.g.dart' -o coverage/lcov.info
          lcov --list coverage/lcov.info
          THRESHOLD=${{ env.threshold }}
          COVERAGE=$(lcov --summary coverage/lcov.info | grep -i 'lines\|Total:' | tail -n 1 | awk '{print $2}' | sed 's/%//')
          echo "Coverage is $COVERAGE%"
          echo $COVERAGE | awk '{if ($1 < 50) exit 1}'

      - name: üßπ Cleanup artifacts
        id: cleanup-artifacts
        if: always()
        timeout-minutes: 2
        run: |
          rm -rf ~/build

      - name: ‚ú® Upload coverage to Codecov
        id: upload-coverage
        timeout-minutes: 2
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos

      - name: üì• Upload test report
        uses: actions/upload-artifact@v4
        if: (success() || failure()) && ${{ github.actor != 'dependabot[bot]' }}
        with:
          name: test-results
          path: reports/tests.json
